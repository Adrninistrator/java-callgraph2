# 处理方法调用时是否解析被调用对象和参数可能的类型与值
parse.method.call.type.value=true

# 处理类的方法前是否需要先解析构造函数以获取非静态字段可能的类型，仅当parse.method.call.type.value参数为true时才可以生效
first.parse.init.method.type=true

# 是否需要分析dto的字段之间的关联关系，仅当parse.method.call.type.value参数为true时才可以生效
analyse.field.relationship=false

# 解析方法出现异常时，是否要继续。true: 继续；false: 不继续
continue.when.error=false

# 记录方法分析耗时的开关（开启后会在输出目录中生成相关文件）。true: 开启；false: 关闭
log.method.spend.time=true

# 生成文件的根目录，以"/"或"\\"作为分隔符，末尾是否为分隔符不影响（默认为jar包所在目录）
output.root.path=

# 生成文件后缀名
output.file.ext=.txt

# 表达式执行时是否开启调试模式，若开启会在应用日志中输出表达式执行时的详细信息
el.debug.mode=false

# 解析方法调用时，通过new创建的被调用类型使用原始类型还是实际类型
# 例如 Super1 obj = new Child1(); obj.func1(); ，则被调用对象的原始类型为Super1，实际类型为Child1
# only_raw 仅记录原始类型	only_actual 仅记录实际类型	raw_actual 记录原始类型+实际类型
handle.callee.new.raw.actual=only_actual

# 解析方法调用时，被调用对象为Spring Bean，类型使用原始类型还是实际类型（支持字段注入、getBean()方法）
# 例如Spring Bean字段定义的类型为Super1，实际注入的类型为Child1，则被调用对象的原始类型为Super1，实际类型为Child1
# only_raw 仅记录原始类型	only_actual 仅记录实际类型	raw_actual 记录原始类型+实际类型
handle.callee.spring.bean.raw.actual=only_actual

