# 对应的枚举类名: JavaCG2ConfigKeyEnum
# 处理方法调用时是否解析被调用对象和参数可能的类型与值
# 开启后可支持识别多态、Spring Bean等使用的实际类型
# 例如对于方法调用 A a = new B(); a.func(123); 开启当前开关后可获得对象a类型为B，func方法调用时参数值为123
parse.method.call.type.value=true

# 处理类的方法前是否需要先解析构造函数以获取非静态字段可能的类型，仅当parse.method.call.type.value参数为true时才可以生效
first.parse.init.method.type=true

# 是否需要分析dto的字段之间通过get/set方法的关联关系，仅当parse.method.call.type.value参数为true时才可以生效
analyse.field.relationship=false

# 解析方法出现异常时，是否要继续
# 若开启后在出现异常时不会抛出异常，会继续执行；若不开启则出现异常时会抛出异常终止处理
continue.when.error=false

# 是否在输出目录生成记录方法分析耗时的文件
log.method.spend.time=true

# 生成文件的根目录，分隔符支持使用/或\，末尾是否为分隔符不影响
# 生成解析结果文件时，根目录由该参数控制，默认生成到需要解析的jar文件所在目录
# 在解析jar文件时，若需要合并jar、war文件、目录合并为新的jar文件，所在目录由该参数控制，默认生成到需要解析的第一个文件、目录所在目录
# 假如需要解析jmod文件，则当前参数必须指定
output.root.path=

# 指定生成文件后缀名，需要以“.”开头
output.file.ext=.txt

# 是否开启表达式执行调试模式，若开启会在应用日志中输出表达式执行时的详细信息
el.debug.mode=false

# 解析方法调用时，通过new创建的被调用类型使用原始类型还是实际类型的开关
# only_raw: 记录一条方法调用关系，被调用类型使用：原始类型	only_actual: 记录一条方法调用关系，被调用类型使用：实际类型	raw_actual: 记录两条方法调用关系，被调用类型分别使用：原始类型、实际类型
# 例如 Super1 obj = new Child1(); obj.func1(); ，被调用对象的原始类型为Super1，实际类型为Child1，通过该开关选择被调用对象使用的类型
handle.callee.new.raw.actual=only_actual

# 解析方法调用时，被调用对象为Spring Bean时（支持字段注入），类型使用原始类型还是实际类型的开关
# only_raw: 记录一条方法调用关系，被调用类型使用：原始类型	only_actual: 记录一条方法调用关系，被调用类型使用：实际类型	raw_actual: 记录两条方法调用关系，被调用类型分别使用：原始类型、实际类型
# 例如Spring Bean字段定义的类型为Super1，实际注入的类型为Child1，被调用对象的原始类型为Super1，实际类型为Child1，通过该开关选择被调用对象使用的类型
handle.callee.spring.bean.raw.actual=only_actual

# 在合并需要解析的jar文件时，是否合并出一个单独的fat jar。仅包含.class文件，且所有的jar文件都合并到从根目录开始
merge.separate.fat.jar=false

# 是否使用Jar兼容性检查模式，仅解析类、方法、字段、类的注解等基础信息
parse.jar.compatibility.mode=false

# 是否仅解析类及类的注解信息，比 parse.jar.compatibility.mode 优先级高
parse.only.class.mode=false

# 指定用于解析 .jmod 文件的jmod程序完整路径
# 假如指定的 .jmod 文件在JDK的jmods目录中，可找到bin目录的jmod程序，则当前参数可省略
# 假如无法找到JDK bin目录的jmod程序，则当前参数不能省略
jmod.program.path=

# 解析的 jar 文件在运行时使用的 JDK 主版本号
# 例如 8、11、17、21 等
# 默认为 8 ，代表 JDK8 及以下版本
jdk.runtime.major.version=8

